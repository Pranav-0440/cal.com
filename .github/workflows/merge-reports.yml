# https://playwright.dev/docs/test-sharding#merging-reports-from-multiple-shards
on:
  workflow_call:
jobs:
  merge-reports:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/dangerous-git-checkout
      - name: Use Node v20.x
        uses: buildjet/setup-node@v4
        with:
          node-version: v20.x
      - name: Expose yarn config as "$GITHUB_OUTPUT"
        id: yarn-config
        run: |
          echo "CACHE_FOLDER=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
      - name: Restore yarn cache
        uses: buildjet/cache@v4
        id: yarn-download-cache
        with:
          path: ${{ steps.yarn-config.outputs.CACHE_FOLDER }}
          key: yarn-download-cache-${{ hashFiles('yarn.lock') }}
      - name: Restore node_modules
        id: yarn-nm-cache
        uses: buildjet/cache@v4
        with:
          path: "**/node_modules/"
          key: ${{ runner.os }}-yarn-nm-cache-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}
      - name: Restore yarn install state
        id: yarn-install-state-cache
        uses: buildjet/cache@v4
        with:
          path: .yarn/ci-cache/
          key: ${{ runner.os }}-yarn-install-state-cache-${{ hashFiles('yarn.lock', '.yarnrc.yml') }}
      - name: Get installed Playwright version
        id: playwright-version
        run: echo "PLAYWRIGHT_VERSION=$(node -e "console.log(require('./package.json').devDependencies['@playwright/test'])")" >> $GITHUB_ENV
      - name: Cache playwright binaries
        id: playwright-cache
        uses: buildjet/cache@v4
        with:
          path: |
            ~/Library/Caches/ms-playwright
            ~/.cache/ms-playwright
            ${{ github.workspace }}/node_modules/playwright
          key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
      - name: Install dependencies concurrently
        run: |
          # Run yarn install and playwright install in parallel
          yarn install --inline-builds &
          YARN_PID=$!
          
          # Wait for yarn install to complete, then run prisma generate
          wait $YARN_PID
          yarn prisma generate &
          PRISMA_PID=$!
          
          # Run playwright install in parallel with prisma generate
          yarn playwright install --with-deps &
          PLAYWRIGHT_PID=$!
          
          # Wait for both to complete
          wait $PRISMA_PID
          wait $PLAYWRIGHT_PID
        env:
          # CI optimizations. Overrides yarnrc.yml options (or their defaults) in the CI action.
          YARN_ENABLE_IMMUTABLE_INSTALLS: "false" # So it doesn't try to remove our private submodule deps
          YARN_ENABLE_GLOBAL_CACHE: "false" # Use local cache folder to keep downloaded archives
          YARN_INSTALL_STATE_PATH: .yarn/ci-cache/install-state.gz # Very small speedup when lock does not change
          YARN_NM_MODE: "hardlinks-local" # Reduce node_modules size
          # Other environment variables
          HUSKY: "0" # By default do not run HUSKY install
      - name: Download blob reports from GitHub Actions Artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-blob-reports
          pattern: blob-report-*
          merge-multiple: true
      - name: Merge into HTML Report
        run: yarn playwright merge-reports --reporter html ./all-blob-reports
      - name: Upload HTML report
        uses: actions/upload-artifact@v4
        with:
          name: html-report--attempt-${{ github.run_number }}-${{ github.run_attempt }}
          path: playwright-report
          retention-days: 14
